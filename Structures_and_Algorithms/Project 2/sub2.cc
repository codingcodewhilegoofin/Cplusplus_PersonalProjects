/*
																Giovanni J Moscato
												Section: 003
												Instructors: John Winans, Venkata Surya Vamsi Maddukuri
												Date:9/15/2019
												Assignment: Project 2

												Info: For this computer assignment,you are to write and implement a C++ program to
												implement two search algorithms ( a linear search and a binary search) on randomly
												generated integers stored in vectors
*/

#include "prog2.h"


//Definitions

/**************************************************************************************************//**
 * void Vectors(vector < int >& v1, vector < int >& v2, int s1, int s2) : Fills the elements
 * of vector v1 with size ARR_SIZE = 200 and v2 with size TEST_ARR_SIZE = 100 with
 * random numbers, generated by two sets of pseudo - random numbers with seed
 * values s1 and s2, where s1(defined as SEED1 = 1) is for v1 and s2(defined as
 * SEED2 = 3) is for v2. To initiate a random number generator(RNG) with the seed
 * value seed, execute the system function srand(seed) (only once), and to generate
 * a random integer in the range[LOW = 1, HIGH = 1000], execute: rand() % (HIGH
 * – LOW + 1) + LOW.
 *****************************************************************************************************/
void Vectors(std::vector < int > &v1, std::vector < int > &v2, int s1, int s2)
{
	srand(s1);//!<Seed

	for (size_t i = 0; i < ARR_SIZE; ++i)
	{
		int random = rand() % (HIGH - LOW + 1) + LOW;//!<Generate random int
		v1[i] = random;
	}

	srand(s2); //!<Seed 2nd vector

	for (size_t i = 0; i < TEST_ARR_SIZE; ++i)
	{
		int random = rand() % (HIGH - LOW + 1) + LOW;//!<Generate random int
		v2[i] = random;
	}
}


/**************************************************************************************************//**
 *  bool linearSearch(const vector < int >& v, int x) : A linear search algorithm, where x
 *  is the searched item in vector v.It simply starts searching for x from the
 *  beginning of vector v to the end, but it stops searching when there is a match.If
 *  the search is successful, it returns true; otherwise, it returns false.To implement
 *  this routine, simply call the find() function in the STL.
 *****************************************************************************************************/
bool linearSearch(const std::vector < int > &v, int x)
{
	if (find(v.begin(), v.end(), x) != v.end())
	{
		return true;
	}
	else
	{
		return false;
	}

	//return find(v.begin(), v.end(), x) != v.end();
}

/**************************************************************************************************//**
 *  bool binarySearch(const vector < int >& v, int x) : A binary search algorithm, where
 *  x is the searched item in vector v.If the search is successful, it returns true;
 *  otherwise, it returns false.To implement this routine, simply call the
 *  binary_search() function in the STL.
 *****************************************************************************************************/
bool binarySearch(const std::vector < int >& v, int x)
{
	if (binary_search(v.begin(), v.end(), x))
	{
		return true;
	}
	else
	{
		return false;
	}
	/*return binary_search(v.begin(), v.end(), x);*/
}

/**************************************************************************************************//**
 * int search(const vector < int >& v1, const vector < int >& v2, bool(*p) (const vector <
 * int >&, int)) : A generic search algorithm – takes a pointer to the search routine p
 * (), and then calls p() for each element of vector v2 in vector v1.It computes the
 * total number of successful searches and returns that value to the main() routine
 * as an input argument to the print routine printStat(), which is used to print out
 * the final statistics for a search algorithm.
 *****************************************************************************************************/
int search(const std::vector < int >& v1, const std::vector < int >& v2, bool(*p) (const std::vector <int >&, int))
{
	int count = 0;	//!< Coutner for each match in the search
					
	for (size_t i = 0; i < v2.size(); i++)//!< Search through vector 2 first 
	{
		if (p(v1, v2[i]) == true)//!<If the pointer that points to two functions (that go through V2's entire element list) match,						
		{						 //!<equate as true.

			count = count + 1;//!< Each time it loops, if a value in v2 matches v1 add 1 to the total count.
		}
	}
	return count;//!<Returns total # of sucessfull matches as an int. Max of 20 possible matches
}

/**************************************************************************************************//**
 * void sortVector(vector < int >& v) : A sort algorithm to sort the elements of vector v
 * in ascending order.To implement this routine, simply call the sort() function in
 * the STL.
 *****************************************************************************************************/
void sortVector(std::vector < int > &v)
{
	std::sort(v.begin(), v.end());
}

/**************************************************************************************************//**
 *  void printVector(const vector < int >& v) : Prints the contents of vector v on stdout,
 *  with NO_ITEMS = 16 items on a single line except perhaps the last line.The sorted
 *  numbers need to be properly aligned on the output.For each printed number,
 *  allocate ITEM_W = 4 spaces for each item.
 *  Search Algorithms
 * 2
 *****************************************************************************************************/
void printVector(const std::vector < int > &v)
{
	//-C for hex dump
	for (size_t i = 0; i < v.size(); ++i)
	{
		std::cout << std::setw(ITEM_W) << v[i] << " ";

		if ( ((i + 1) % NO_ITEMS == 0) ? "\n" : "Somethings wrong")	//!<check other cases & divide errors using ternary operator
		{
			
		}
	}
}

/**************************************************************************************************//**
 *  void printStat(int totalSucCnt, int vectorSz) : Prints the percent of successful
 *  searches as right - aligned, floating - point numbers on stdout, where totalSucCnt is
 *  the total
 *****************************************************************************************************/
void printStat(int totalSucCnt, int vectorSz)
{
	double percent = totalSucCnt * 100.0 / vectorSz;//!<Generic formula to make it a percentage  totalsucess * 100 / totalsize

	//!<right - aligned, floating - point numbers 
	std::cout << std::fixed << std::setprecision(2) << "Percent of successful Searches: " << percent << "%" << std::endl;
}

//
//#if 1
//int main()
//{
//	// Define two empty vectors of ints for given sizes and
//	// fill them by random integers for given seed values.
//
//	vector < int > A(ARR_SIZE), B(TEST_ARR_SIZE);
//	Vectors(A, B, SEED1, SEED2);
//
//	// Print test (1st) vector before sorting its elements.
//	cout << "Random Numbers Before Sorting:\n\n";
//	printVector(A);
//
//	// Sort test (1st) vector.
//	sortVector(A);
//
//	// Print test (1st) vector after sorting its elements.
//	cout << "\nRandom Numbers After Sorting:\n\n";
//	printVector(A);
//
//	// Print test values from 2nd vector.
//	cout << "\nRandom Numbers Searched:\n\n";
//	printVector(B);
//
//	// Search each test value from 2nd vector in 1st vector
//	// using linear search algorithm.
//
//	cout << "\nLinear Search:\n";
//	int counter1 = search(A, B, linearSearch);
//	printStat(counter1, TEST_ARR_SIZE);
//
//	// Search each test value from 2nd vector in 1st vector
//	// using binary search algorithm.
//
//	cout << "\nBinary Search:\n";
//	int counter2 = search(A, B, binarySearch);
//	printStat(counter2, TEST_ARR_SIZE);
//
//	return 0;
//}
//#endif